{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2358, 2367, 2376, 2394, 2403, 2412, 2421, 2439, 2448, 2457, 2466, 2484, 2493, 2502, 2511, 2529, 2538, 2547, 2556, 2574, 2583, 2592, 2601, 2619, 2628, 2637, 2646, 2664, 2673, 2682, 2691, 2709, 2718, 2727, 2736, 2754, 2763, 2772, 2781, 2799, 2808, 2817, 2826, 2844, 2853, 2862, 2871, 2889, 2898, 2907, 2916, 2934, 2943, 2952, 2961, 2979, 2988, 2997, 3006, 3024, 3033, 3042, 3051, 3069, 3078, 3087, 3096, 3114, 3123, 3132, 3141, 3159, 3168, 3177, 3186, 3204, 3213, 3222, 3231, 3249, 3258, 3267, 3276, 3294, 3303, 3312, 3321, 3339, 3348, 3357, 3366, 3384, 3393, 3402, 3411, 3429, 3438, 3447, 3456, 3474, 3483, 3492, 3501, 3519, 3528, 3537, 3546, 3564, 3573, 3582, 3591, 3609, 3618, 3627, 3636, 3654, 3663, 3672, 3681, 3699, 3708, 3717, 3726, 3744, 3753, 3762, 3771, 3789, 3798, 3807, 3816, 3834, 3843, 3852, 3861, 3879, 3888, 3897, 3906, 3924, 3933, 3942, 3951, 3969, 3978, 3987, 3996, 4014, 4023, 4032, 4041, 4059, 4068, 4077, 4086, 4104, 4113, 4122, 4131, 4149, 4158, 4167, 4176, 4194, 4203, 4212, 4221, 4239, 4248, 4257, 4266, 4284, 4293, 4302, 4311, 4329, 4338, 4347, 4356]\n"
     ]
    }
   ],
   "source": [
    "#Write a python program which will find \n",
    "#all numbers which are divisible by 9 \n",
    "#but are not a multiple of 5 between 2350 and 4356\n",
    "l = [i for i in range(2350,4357) if i%9==0 and i%5 !=0 ]\n",
    "print(l)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter stringHeloodsJKa\n",
      "The number of lower case letters is 7 and upper case is 3\n"
     ]
    }
   ],
   "source": [
    "#Write a program that accepts a sentence and \n",
    "#calculate the number of upper case letters and lower case letters.\t\n",
    "inp = input(\"Enter string\")\n",
    "up = 0\n",
    "low = 0\n",
    "for c in inp:\n",
    "    if c.isupper():\n",
    "        up+=1\n",
    "    else:\n",
    "        low+=1\n",
    "print(\"The number of lower case letters is %d and upper case is %d\"%(low,up))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[12, 34, 45, 10]\n",
      "[12, 45, 10]\n"
     ]
    }
   ],
   "source": [
    "lst = [1,12,34,45,10]\n",
    "lst.remove(1)\n",
    "print(lst)\n",
    "lst.pop(1)\n",
    "print(lst)\n",
    "#Output\n",
    "#[12, 34, 45, 10] - Remove removes the element\n",
    "#[12, 45, 10] - #Pop removes the element at the given index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4096\n"
     ]
    }
   ],
   "source": [
    "#Lambda function example\n",
    "g = lambda x,y:x**y\n",
    "print(g(8,4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter number: 358\n",
      "Three hundred and Fifty Eight\n"
     ]
    }
   ],
   "source": [
    "#Write a program that gets a three digit number as \n",
    "#input and prints the number name. \n",
    "#For example, if the user enters 167, \n",
    "#the output should be One hundred and sixty seven. \n",
    "#Use multiple dictionaries to solve the same.  8 marks\n",
    "\n",
    "ones = {0:None,1:\"One\",2:\"Two\",3:\"Three\",4:\"Four\",5:\"Five\",6:\"Six\",7:\"Seven\",8:\"Eight\",9:\"Nine\"}\n",
    "tens = {0:None,2:\"Twenty\",3:\"Thirty\",4:\"Forty\",5:\"Fifty\",6:\"Sixty\",7:\"Seventy\",8:\"Eighty\",9:\"Ninety\"}\n",
    "tens_one = {0:\"Ten\",1:\"Eleven\",2:\"Twelve\",3:\"Thirteen\",4:\"Fourteen\",5:\"Fifteen\",6:\"Sixteen\",7:\"Seventeen\",8:\"Eighteen\",9:\"Nineteen\"}\n",
    "\n",
    "num = input(\"Enter number: \")\n",
    "l = []\n",
    "hundred = int(num[0])\n",
    "ten = int(num[1])\n",
    "one = int(num[2])\n",
    "\n",
    "l.append(ones[hundred]+ \" hundred and \")\n",
    "if ten != 1:\n",
    "    l.append(tens[ten]+ \" \")\n",
    "    l.append(ones[one])\n",
    "else:\n",
    "    l.append(tens_one[one])\n",
    "\n",
    "\n",
    "print(\"\".join(l))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter string 1 :listen\n",
      "Enter string 2 :silent\n",
      "The strings are anagrams\n"
     ]
    }
   ],
   "source": [
    "## Check if two strings are anagrams. 5 marks\n",
    "s1 = input(\"Enter string 1 :\")\n",
    "s2 = input(\"Enter string 2 :\")\n",
    "def checkAnagram(st1,st2):\n",
    "    l1 = list(st1).sort()\n",
    "    l2 = list(st2).sort()\n",
    "    if l1==l2:\n",
    "        print(\"The strings are anagrams\")\n",
    "    else:\n",
    "        print(\"The strings are not anagrams\")\n",
    "checkAnagram(s1,s2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the number: 56\n",
      "111000"
     ]
    }
   ],
   "source": [
    "#Solution using recursion\n",
    "num = int(input(\"Enter the number: \"))\n",
    "def binConvert(num):\n",
    "    if(num > 1):\n",
    "        # divide with integral result  \n",
    "        # (discard remainder)  \n",
    "        binConvert(num//2)  \n",
    "    print(num%2, end='') \n",
    "\n",
    "binConvert(num)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter number: 56\n",
      "111000\n"
     ]
    }
   ],
   "source": [
    "#Solution without recursion\n",
    "number = int(input(\"Enter number: \"))\n",
    "l = []\n",
    "while(number>0):\n",
    "    q = number%2\n",
    "    l.append(str(q))\n",
    "    number = number//2\n",
    "l.reverse()\n",
    "print(\"\".join(l))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter number of lines: 9\n",
      "* \n",
      "* * \n",
      "* * * \n",
      "* * * * \n",
      "* * * * * \n",
      "* * * * \n",
      "* * * \n",
      "* * \n",
      "* \n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Pattern Printing\n",
    "n = int(input(\"Enter number of lines: \"))\n",
    "rows = n//2 if(n%2==0) else (n//2 + 1) #use of ternary operator\n",
    "\n",
    "for i in range (0, rows):\n",
    "    for j in range(0, i + 1):\n",
    "        print(\"*\", end=' ')\n",
    "    print(\"\\r\")\n",
    "for i in range (rows, 0, -1):\n",
    "    for j in range(0, i -1):\n",
    "        print(\"*\", end=' ')\n",
    "    print(\"\\r\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [default]",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
